# plak alles en sla op (Ctrl+O, Enter, Ctrl+X)

git add .github/workflows/pipeline.yml
git commit -m "ci: robust daily pipeline (build scores, reports, dated copies, full artifact)"
git push

# start een run en kijk live mee
gh workflow run pipeline.yml --ref main
gh run watch
name: Daily Crypto Pipeline

on:
  workflow_dispatch:
  schedule:
    # 06:00 UTC ‚âà 08:00 NL-tijd
    - cron: "0 6 * * *"

concurrency:
  group: daily-crypto
  cancel-in-progress: false

permissions:
  contents: write
  actions: read

jobs:
  build-and-report:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pandas numpy requests

      - name: Prepare report dir
        run: mkdir -p data/reports data/state

      # ---------- DIAGNOSTICS ----------
      - name: Diagnostics (before build)
        run: |
          echo "::group::Tree data/"
          ls -lahR data || true
          echo "::endgroup::"

      # ---------- BUILD SCORES ----------
      # Probeert meerdere bekende commando's. Als niets lukt -> FAIL (zodat je geen 'snelle groene' run krijgt).
      - name: Build scores (scores_latest.csv/json)
        run: |
          set -e
          ok=""
          if [ -f scripts/build_scores.py ]; then
            echo "Using scripts/build_scores.py"
            python3 scripts/build_scores.py \
              --out-csv data/reports/scores_latest.csv \
              --out-json data/reports/scores_latest.json && ok="yes"
          fi
          if [ -z "$ok" ] && [ -f src/ta.py ]; then
            echo "Using src/ta.py"
            python3 src/ta.py \
              --out-csv data/reports/scores_latest.csv \
              --out-json data/reports/scores_latest.json && ok="yes"
          fi
          if [ -z "$ok" ] && [ -f run.py ]; then
            echo "Using run.py (expects same flags)"
            python3 run.py \
              --out-csv data/reports/scores_latest.csv \
              --out-json data/reports/scores_latest.json && ok="yes"
          fi
          if [ -z "$ok" ]; then
            echo "‚ùå Geen builder gevonden/geslaagd voor scores_latest.*"
            echo "Zoek verwachte scripts: scripts/build_scores.py of src/ta.py of run.py"
            exit 1
          fi

      - name: Assert scores exist (hard check)
        run: |
          test -f data/reports/scores_latest.csv || { echo "‚ùå scores_latest.csv ontbreekt"; exit 1; }
          test -s data/reports/scores_latest.csv || { echo "‚ùå scores_latest.csv is leeg"; exit 1; }
          [ -f data/reports/scores_latest.json ] || echo "‚ö†Ô∏è scores_latest.json ontbreekt (ga door)"

      - name: Build top5_latest.csv & top5_latest.md
        run: |
          python - <<'PY'
          import os, pandas as pd, sys
          os.makedirs("data/reports", exist_ok=True)
          src = "data/reports/scores_latest.csv"
          df = pd.read_csv(src)
          # kies kolom voor ranking
          key = None
          for k in ("score","Total_%","total","TOTAL_%"):
            if k in df.columns: key=k; break
          if key is None:
            raise SystemExit("scores_latest.csv mist score-kolom")
          out = df.sort_values(key, ascending=False).head(5).copy()
          out.rename(columns={key:"score"}, inplace=True)
          out.to_csv("data/reports/top5_latest.csv", index=False)

          lines=["# üìä Top 5","","| # | Symbol | Score |","|---:|:------|------:|"]
          sym = next((c for c in out.columns if c.lower()=="symbol"), out.columns[0])
          for i,row in enumerate(out.itertuples(index=False),1):
            lines.append(f"| {i} | {getattr(row,sym)} | {getattr(row,'score')} |")
          open("data/reports/top5_latest.md","w").write("\n".join(lines)+"\n")
          print("‚úÖ top5_latest.csv & top5_latest.md gemaakt.")
          PY

      - name: Annotate top5 with market regime & advice
        run: |
          if [ -f scripts/annotate_market_regime.py ]; then
            python3 scripts/annotate_market_regime.py data/reports/top5_latest.md
          else
            echo "skip annotate_market_regime (script ontbreekt)"
          fi

      - name: Cooldown guard (note in MD)
        run: |
          if [ -f scripts/cooldown_guard.py ]; then
            python3 scripts/cooldown_guard.py --md data/reports/top5_latest.md || true
          else
            echo "skip cooldown_guard (script ontbreekt)"
          fi

      - name: Allocation advice (append MD)
        run: |
          if [ -f scripts/advise_allocation.py ]; then
            python3 scripts/advise_allocation.py --append-md --md-file data/reports/top5_latest.md
          else
            echo "skip advise_allocation (script ontbreekt)"
          fi

      - name: Run Moonshot v2 (exclude top-30 + bluechips)
        run: |
          if [ -f scripts/moonshot_v2.py ]; then
            python3 scripts/moonshot_v2.py \
              --scores-csv data/reports/scores_latest.csv \
              --scores-json data/reports/scores_latest.json \
              --out-csv data/reports/moonshots_v2_latest.csv \
              --out-md  data/reports/moonshots_v2_latest.md \
              --top 5 \
              --min-volume 1.0 \
              --exclude-top-rank 30 \
              --exclude-bluechips
          else
            echo "skip moonshot_v2 (script ontbreekt)"
          fi

      # ---------- DATED COPIES ----------
      - name: Add dated copies (YYYY-MM-DD, UTC)
        id: datestamp
        run: |
          DATE=$(date -u +%Y-%m-%d)
          echo "date=$DATE" >> "$GITHUB_OUTPUT"
          for f in data/reports/scores_latest.csv data/reports/scores_latest.json \
                   data/reports/top5_latest.csv data/reports/top5_latest.md \
                   data/reports/moonshots_v2_latest.csv data/reports/moonshots_v2_latest.md \
                   data/reports/latest.csv data/reports/latest.json
          do
            [ -f "$f" ] || continue
            base=$(basename "$f"); ext="${base##*.}"; name="${base%.*}"
            # vervang *_latest door _<DATE>, anders suffix toevoegen
            if [[ "$name" == *"_latest" ]]; then
              cp -f "$f" "data/reports/${name/_latest/_$DATE}.${ext}"
            elif [[ "$name" == *"_v2_latest" ]]; then
              cp -f "$f" "data/reports/${name/_v2_latest/_v2_$DATE}.${ext}"
            else
              cp -f "$f" "data/reports/${name}_$DATE.${ext}"
            fi
          done

      # ---------- ARTIFACT ----------
      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports
          if-no-files-found: warn
          retention-days: 14
          path: |
            data/reports/latest.*
            data/reports/scores_latest.*
            data/reports/top5_latest.*
            data/reports/moonshots*.csv
            data/reports/moonshots*.md
            data/reports/*_${{ steps.datestamp.outputs.date }}.*

      # (Optioneel) push top5_latest.csv naar 'reports' branch
      - name: (Optional) Commit top5_latest.csv to 'reports' branch
        if: ${{ env.PUSH_REPORTS_BRANCH == 'true' }}
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          BR=reports
          git checkout -B "$BR"
          git add data/reports/top5_latest.csv || true
          git commit -m "Update top5_latest.csv [skip ci]" || true
          git push -u origin "$BR"

