name: Daily Crypto Pipeline

on:
  workflow_dispatch:
  schedule:
    # 06:00 UTC ≈ 08:00 NL-tijd (let op: zomer-/wintertijd)
    - cron: "0 6 * * *"

concurrency:
  group: daily-crypto
  cancel-in-progress: false

permissions:
  contents: write   # nodig voor (optioneel) push naar 'reports' branch
  actions: read

jobs:
  build-and-report:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (if any)
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pandas numpy

      - name: Prepare report dir
        run: mkdir -p data/reports

      # --- Maak top5 uit scores_latest.csv (failsafe & universeel) ---
      - name: Build top5_latest.csv from scores_latest.csv
        run: |
          python - <<'PY'
          import os, pandas as pd, sys
          os.makedirs("data/reports", exist_ok=True)
          src = "data/reports/scores_latest.csv"
          if not os.path.isfile(src):
              print(f"⚠️  {src} ontbreekt; sla stap over.", file=sys.stderr); sys.exit(0)
          df = pd.read_csv(src)
          # kies kolom voor ranking
          for k in ("score","Total_%","total","TOTAL_%"):
              if k in df.columns: key=k; break
          else:
              print("⚠️  Geen scorekolom gevonden; sla stap over.", file=sys.stderr); sys.exit(0)
          out = df.sort_values(key, ascending=False).head(5).copy()
          out.rename(columns={key:"score"}, inplace=True)
          out.to_csv("data/reports/top5_latest.csv", index=False)
          lines=["# 📊 Top 5","","| # | Symbol | Score |","|---:|:------|------:|"]
          sym = [c for c in out.columns if c.lower()=="symbol"]
          s = sym[0] if sym else out.columns[0]
          for i,row in enumerate(out.itertuples(index=False),1):
              lines.append(f"| {i} | {getattr(row,s)} | {getattr(row,'score')} |")
          open("data/reports/top5_latest.md","w").write("\n".join(lines)+"\n")
          print("✅ top5_latest.csv & top5_latest.md gemaakt.")
          PY

      - name: Annotate top5 with market regime & advice
        run: |
          if [ -f scripts/annotate_market_regime.py ] && [ -f data/reports/top5_latest.md ]; then
            python3 scripts/annotate_market_regime.py data/reports/top5_latest.md || true
          else
            echo "skip annotate_market_regime"
          fi

      - name: Cooldown guard (blokkeer te snelle wissel → voeg notitie toe)
        run: |
          if [ -f scripts/cooldown_guard.py ] && [ -f data/reports/top5_latest.md ]; then
            python3 scripts/cooldown_guard.py --md data/reports/top5_latest.md || true
          else
            echo "skip cooldown_guard"
          fi

      - name: Run Moonshot v2 (exclude top-30 + bluechips)
        run: |
          if [ -f scripts/moonshot_v2.py ]; then
            python3 scripts/moonshot_v2.py \
              --scores-csv data/reports/scores_latest.csv \
              --scores-json data/reports/scores_latest.json \
              --out-csv data/reports/moonshots_v2_latest.csv \
              --out-md  data/reports/moonshots_v2_latest.md \
              --top 5 \
              --min-volume 1.0 \
              --exclude-top-rank 30 \
              --exclude-bluechips
          else
            echo "skip moonshot_v2"
          fi

      # --- Dated copies naast *_latest aanmaken ---
      - name: Add dated copies (YYYY-MM-DD)
        id: datestamp
        run: |
          DATE=$(date -u +%Y-%m-%d)
          echo "date=$DATE" >> "$GITHUB_OUTPUT"
          for f in data/reports/scores_latest.csv data/reports/scores_latest.json \
                   data/reports/top5_latest.csv data/reports/top5_latest.md \
                   data/reports/moonshots_v2_latest.csv data/reports/moonshots_v2_latest.md
          do
            [ -f "$f" ] || continue
            base=$(basename "$f"); ext="${base##*.}"; name="${base%.*}"
            cp -f "$f" "data/reports/${name/_latest/_$DATE}.${ext}"
          done

      # --- Artifact bevat ALLE benodigde outputs ---
      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports
          if-no-files-found: warn
          retention-days: 14
          path: |
            data/reports/latest.*
            data/reports/scores_latest.*
            data/reports/top5_latest.*
            data/reports/moonshots*.csv
            data/reports/moonshots*.md
            data/reports/*_${{ steps.datestamp.outputs.date }}.*

      # --- Optioneel: push top5_latest.csv naar aparte 'reports' branch ---
      - name: (Optional) Commit top5_latest.csv to 'reports' branch
        if: ${{ env.PUSH_REPORTS_BRANCH == 'true' }}
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          BR=reports
          git checkout -B "$BR"
          git add data/reports/top5_latest.csv || true
          git commit -m "Update top5_latest.csv [skip ci]" || true
          git push -u origin "$BR"

